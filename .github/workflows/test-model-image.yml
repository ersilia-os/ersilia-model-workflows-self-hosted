name: Test model image

on:
  workflow_call:
    inputs:
      repo_name:
        required: true
        type: string
    outputs:
      retag-success:
        description: "Whether retag-image succeeded"
        value: ${{ jobs.retag-image.outputs.status }}
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_PASSWORD:
        required: true

jobs:
  test-image-amd64:
    runs-on: self-hosted
    continue-on-error: true
    outputs:
      passed: ${{ steps.check-result.outcome }}
    steps:
      - name: Set up conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: "3.12"
          auto-activate-base: false

      - name: Disable .conda archive format
        run: conda config --set use_only_tar_bz2 true

      - name: Install dependencies
        run: |
          conda run -n base python -m pip install 'git+https://github.com/ersilia-os/ersilia.git#egg=ersilia[test]'

      - name: Test AMD64 image
        env:
          MODEL_ID: ${{ inputs.repo_name }}
        run: |
          conda run -n base bash -c "
            ersilia -v test $MODEL_ID --deep --from_dockerhub --version dev-amd64
          "
      
      - name: Rename test results JSON
        env:
          MODEL_ID: ${{ inputs.repo_name }}
        run: |
          TEST_JSON="${MODEL_ID}-test.json"

          if [[ ! -f "$TEST_JSON" ]]; then
            echo "Error: Test results file $TEST_JSON not found!"
            exit 1
          fi

          mv "$TEST_JSON" "${MODEL_ID}-test-amd64.json"
          echo "TEST_JSON_AMD64=${MODEL_ID}-test-amd64.json" >> "$GITHUB_ENV"

      - name: Upload logs as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-report-amd64
          path: ${{ env.TEST_JSON_AMD64 }}

      - name: Parse test results
        id: check-result
        env:
          MODEL_ID: ${{ inputs.repo_name }}
        run: |
          TEST_JSON="${MODEL_ID}-test-amd64.json"
          echo "Parsing test results from $TEST_JSON"

          TEST_FAILED=$(jq 'recurse | objects | select(map(select(. == false)) | length > 0)' "$TEST_JSON")
          if [[ -n "$TEST_FAILED" ]]; then
            echo "❌ Some tests failed. Stopping workflow."
            exit 1
          fi

  test-image-arm64:
    runs-on: default-linux-arm64
    needs: test-image-amd64
    if: always()
    continue-on-error: true
    outputs:
      passed: ${{ steps.check-result.outcome }}
    steps:
      - name: print architecture
        run: |
          echo "Architecture: $(uname -m)"
      - name: Set up conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: "3.12"
          auto-activate-base: false

      - name: Disable .conda archive format
        run: conda config --set use_only_tar_bz2 true

      - name: Install dependencies
        run: |
          conda run -n base python -m pip install 'git+https://github.com/ersilia-os/ersilia.git#egg=ersilia[test]'
          conda run -n base ersilia --version

      - name: Test ARM64 image
        env:
          MODEL_ID: ${{ inputs.repo_name }}
        run: |
          conda run -n base bash -c "
            ersilia -v test $MODEL_ID --deep --from_dockerhub --version dev-arm64
          "

      - name: Rename test results JSON
        env:
          MODEL_ID: ${{ inputs.repo_name }}
        run: |
          TEST_JSON="${MODEL_ID}-test.json"

          if [[ ! -f "$TEST_JSON" ]]; then
            echo "Error: Test results file $TEST_JSON not found!"
            exit 1
          fi

          mv "$TEST_JSON" "${MODEL_ID}-test-arm64.json"
          echo "TEST_JSON_ARM64=${MODEL_ID}-test-arm64.json" >> "$GITHUB_ENV"

      - name: Upload logs as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-report-arm64
          path: ${{ env.TEST_JSON_ARM64 }}

      - name: Parse test results
        id: check-result
        env:
          MODEL_ID: ${{ inputs.repo_name }}
        run: |
          TEST_JSON="${MODEL_ID}-test-arm64.json"
          echo "Parsing test results from $TEST_JSON"

          TEST_FAILED=$(jq 'recurse | objects | select(map(select(. == false)) | length > 0)' "$TEST_JSON")
          if [[ -n "$TEST_FAILED" ]]; then
            echo "❌ Some tests failed. Stopping workflow."
            exit 1
          fi
      
  retag-image:
    runs-on: self-hosted
    needs: [test-image-amd64, test-image-arm64]
    if: always()
    outputs:
      status: ${{ steps.retag-step.outcome }}
    steps:
      - name: Check if AMD successful
        if: ${{ needs.test-image-amd64.outputs.passed == 'success' }}
        run: |
          echo "AMD64" > amd.txt
      
      - name: Check if ARM successful
        if: ${{ needs.test-image-arm64.outputs.passed == 'success' }}
        run: |
          echo "ARM64" > arm.txt
      
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # If either amd.txt or arm.txt files exist, we tag the image with date and as latest
      - name: Check architecture information
        id: retag-step
        env:
          MODEL: ${{ github.event.repository.name }}
        run: |
            if [[ -f amd.txt || -f arm.txt ]]; then
              echo "Tagging image with date and as latest"
              docker buildx imagetools create \
                --tag ersiliaos/$MODEL:$(date +%Y-%m-%d) \
                --tag ersiliaos/$MODEL:latest \
                ersiliaos/$MODEL:dev
              echo "Successfully retagged multi-architecture image."
            else
              echo "Image test failed, keeping the dev tag"
              exit 1
            fi

      - name: Determine Architecture and Save to arch.txt
        run: |
          ARCH=""
          if [[ -f amd.txt ]]; then
            ARCH="AMD64"
          fi
          if [[ -f arm.txt ]]; then
            if [[ -n "$ARCH" ]]; then
              ARCH="$ARCH,ARM64"
            else
              ARCH="ARM64"
            fi
          fi
          echo "$ARCH" > arch.txt
          cat arch.txt 

      - name: Upload Artifact Architecture
        uses: actions/upload-artifact@v4.5.0
        with:
          name: architecture
          path: arch.txt
      
